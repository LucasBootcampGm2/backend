Práctica: Reutilización de Middlewares en Express

Objetivo
Crear middlewares reutilizables para logging, autenticación y validación, y aplicarlos en diferentes rutas de una aplicación Express.

Pasos
1. Configurar un Proyecto Express 
Si aún no tienes un proyecto, crea uno nuevo.
    Instala Express si no lo has hecho:
    - npm init -y
    - npm install express

2. Crear Middlewares Reutilizables
Crea un archivo llamado middlewares.js y define los siguientes
middlewares.
// middlewares.js
function logger(req, res, next) {
    console.log(`${req.method} ${req.url}`);
    next(); 
}
function authenticate(req, res, next) {
    const token = req.headers['authorization'];
    if (token && token === 'Bearer token123') {
        next(); 
    } else {
        res.status(401).json({ message: 'No autorizado' }); 
    }
}
function validateUser(req, res, next) {
    const { username, password } = req.body;
    if (username && password) {
        next(); 
    } else {
        res.status(400).json({ message: 'Faltan datos de usuario' });
    }
}
module.exports = { logger, authenticate, validateUser };

3. Crear el Servidor Express y Aplicar los Middlewares
Crea  un  archivo  llamado  server.js  y  configura  tu  servidor  Express  para usar los middlewares.
const express = require('express');

const { logger, authenticate, validateUser } = require('./middlewares');
const app = express();
app.use(express.json());
app.use(logger);
app.post('/register', validateUser, (req, res) => {
    res.status(201).json({ message: 'Usuario registrado con éxito', user:
req.body });
});
app.get('/protected', authenticate, (req, res) => {
    res.json({ message: 'Acceso permitido a ruta protegida' });
});
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).send('Error en el servidor');
});
app.listen(3000, () => {
    console.log('Servidor en ejecución en http://localhost:3000');
});

4. Probar la Aplicación
Registrar un Usuario: Usa Postman o curl para enviar una solicitud POST a
http://localhost:3000/register con un cuerpo JSON que contenga username y
password.
{
    "username": "user1",
    "password": "pass123"
}
Acceder  a  la  Ruta  Protegida:  Prueba  acceder  a  http://localhost:3000/protected  sin  un  token  de
autorización.  Deberías  recibir  un  error  401.  Luego,  intenta  acceder  con  el  token  correcto:  Bearer
token123.